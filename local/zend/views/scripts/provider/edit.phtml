<?
if (!empty($this->designData)) {
    $designId = $this->designData->ID;
}
$row_goods = $this->row_goods;
$all_items = count($row_goods);

$moderation = 0;
$show = 0;
$cancel = 0;
foreach($row_goods as $elem){
	if($elem->PROPERTY_STATUS_ENUM_ID == 16){
		$moderation+=1;
	}
	else if($elem->PROPERTY_STATUS_ENUM_ID == 15){
		$show+=1;
	}
	else if($elem->PROPERTY_STATUS_ENUM_ID == 17){
		$cancel+=1;
	}
};
?>
<div class="content-container">
    <?= EZendManager::profileSidebar() ?>

    <div class="profile-content">
		<div id="provider">
			<h2>Редактирование товара</h2>
			
			<?= $this->render("provider/edit/edit-step2.phtml") //Второй шаг ?>

		<script type="text/javascript">
	
			var flag = 0;
			function OpenOrClose(elem){
	
				if(flag == 0){
					console.log(elem)
					$(elem).removeClass("hide");
					$(elem).addClass("show");
					$( ".js-add-design-step2-form" ).show('medium');
					flag = 1;
				}
				else{
				
					$(elem).removeClass("show");
					$(elem).addClass("hide");
					$( ".js-add-design-step2-form" ).hide('medium');
					flag = 0;
				}
				return false;
			};
			
			var flag2 = 0;
			function Open2OrClose(elem){
	
				if(flag2 == 0){
					console.log(elem)
					$(elem).removeClass("hide");
					$(elem).addClass("show");
					$( "#option_add_goods" ).show('medium');
					flag2 = 1;
				}
				else{
				
					$(elem).removeClass("show");
					$(elem).addClass("hide");
					$( "#option_add_goods" ).hide('medium');
					flag2 = 0;
				}
				return false;
			};
		
		</script>
	<script type="text/javascript">
		var list_elem_n1 = document.getElementById('list_elem_n1');
		var del_btn = document.getElementById('del_btn');
		var set_status = document.getElementById('set_status');
		
		function addElement(){
			$('#elements').append('	<div class="input-row"><label for="name" class="required">URL-адрес изображений</label><input type="text" name="name" id="name" value="picture" class="required" autocomplete="off" maxlength="100"></div>');
		}
		
		function checkAll(obj) {
		  'use strict';
		  // Получаем NodeList дочерних элементов input формы: 
		  var items = obj.form.getElementsByTagName("input"), 
			  len, i;
		  // Здесь, увы цикл по элементам формы:
		  for (i = 0, len = items.length; i < len; i += 1) {
			// Если текущий элемент является чекбоксом...
			if (items.item(i).type && items.item(i).type === "checkbox") {
			  // Дальше логика простая: если checkbox "Выбрать всё" - отмечен            
			  if (obj.checked) {
				// Отмечаем все чекбоксы...
				items.item(i).checked = true;
			  } else {
				// Иначе снимаем отметки со всех чекбоксов:
				items.item(i).checked = false;
			  }       
			}
		  }
		}
		
		//массив содержит в себе id checked элементов
		var arr_check_elem = [];
		//следит за отмеченными элементами
		function checkElem(event){
			// получить объект событие.
			// вместо event лучше писать window.event
			var event = event || window.event
			// кросс-браузерно получить target
			var target = event.target || event.srcElement
			// цикл двигается вверх от target к родителям до table
			while (target != this) {
				if (target.tagName == 'INPUT' && target.getAttribute('type') == "checkbox") {
					
					// нашли элемент, который нас интересует!
					var id_elem = target.getAttribute('data-id-elem');
					//нужно пройти по массиву и проверитть есть ли там уже выбранный элемент
					
					
					//если поставили галочку
					
					if(target.checked === true){
						
						if(arr_check_elem.length > 0){
							var i = 0;
							var flag = 1;
							for(i = 0; i < arr_check_elem.length; i++){
								if(arr_check_elem[i] == id_elem){
									flag = 0;
								}
							}
							arr_check_elem.push(target.getAttribute('data-id-elem'));
							target.parentNode.parentNode.setAttribute('data-check', 1);
						}
						else{
							arr_check_elem.push(target.getAttribute('data-id-elem'));
							target.parentNode.parentNode.setAttribute('data-check', 1);
						}
					
					}
					else{
						//пройдемся по всем элементам чтобы узать какой из них удалили
						var i = 0;
						if(arr_check_elem.length > 0){
							for(i = 0; i < arr_check_elem.length; i++){
								if(arr_check_elem[i] == id_elem){
									arr_check_elem.splice(i, 1); // начиная с позиции 1, удалить 1 элемент
									target.parentNode.parentNode.setAttribute('data-check', 0);
								}
							};
						};
					};
					
					return;
				}
				target = target.parentNode;
			}
		}
		
		//удаляет выбранные елементы
		function delElems(event){
			// получить объект событие.
			// вместо event лучше писать window.event
			var event = event || window.event
			// кросс-браузерно получить target
			var target = event.target || event.srcElement
			var result = confirm('Удалить выбранные товары?');
			if(result){
				$.ajax({
					type: "POST",
					url: "/goods/delgoods",
					data: "elems="+JSON.stringify(arr_check_elem),
					success: function(msg){
						var list_tr = list_elem_n1.getElementsByTagName('TBODY')[0].getElementsByTagName('TR');
						var i = 0;
						for(i; i < list_tr.length; i++){
							if(list_tr[i].getAttribute('data-check') == 1){
								list_tr[i].style.display = 'none';
							};
						}
						while (target != this) {
							if (target.tagName == 'INPUT' && target.getAttribute('type') == "checkbox") {
								
								return;
							}
							target = target.parentNode;
						}		
					}
				});
			};
		}
		
		//меняет статус товара
		function changeStatus(event){
			// получить объект событие.
			// вместо event лучше писать window.event
			var event = event || window.event
			// кросс-браузерно получить target
			var target = event.target || event.srcElement
			var result = confirm('Отправить выбранные товары на модерацию?');
			if(result){
				$.ajax({
					type: "POST",
					url: "/goods/changestatusgoods",
					data: "elems="+JSON.stringify(arr_check_elem),
					success: function(msg){
						var list_tr = list_elem_n1.getElementsByTagName('TBODY')[0].getElementsByTagName('TR');
						var i = 0;
						for(i; i < list_tr.length; i++){
							if(list_tr[i].getAttribute('data-check') == 1){
								list_tr[i].style.display = 'none';
							};
						}
						while (target != this) {
							if (target.tagName == 'INPUT' && target.getAttribute('type') == "checkbox") {
								
								return;
							}
							target = target.parentNode;
						}		
					}
				});
			};
		}
		
		//тык-тык
		list_elem_n1.onclick = checkElem;
		del_btn.onclick = delElems;
		set_status.onclick = changeStatus;
		</script>
 

	</div>
	
	
    <!--<div class="profile-content js-profile-content" data-type="<?= $type ?>">
		<!--<div class="profile-form">
            <?= ($type == DESIGNER_TYPE_ID)?new Sibirix_Form_ProfileDesigner():new Sibirix_Form_ProfileClient(); ?>
        </div>-->

        <!--<div class="profile-form">
           <?= new Sibirix_Form_ProfileChangePassword() ?>
        </div>-->
   <!-- </div>-->


		<script>

			'use strict';

			;( function ( document, window, index )
			{
				// feature detection for drag&drop upload
				var isAdvancedUpload = function()
					{
						var div = document.createElement( 'div' );
						return ( ( 'draggable' in div ) || ( 'ondragstart' in div && 'ondrop' in div ) ) && 'FormData' in window && 'FileReader' in window;
					}();

				// applying the effect for every form
				var forms = document.querySelectorAll( '.box' );
				Array.prototype.forEach.call( forms, function( form )
				{
					var input		 = form.querySelector( 'input[type="file"]' ),
						label		 = form.querySelector( 'label' ),
						errorMsg	 = form.querySelector( '.box__error span' ),
						restart		 = form.querySelectorAll( '.box__restart' ),
						droppedFiles = false,
						showFiles	 = function( files )
						{
							label.textContent = files.length > 1 ? ( input.getAttribute( 'data-multiple-caption' ) || '' ).replace( '{count}', files.length ) : files[ 0 ].name;
						},
						triggerFormSubmit = function()
						{
							var event = document.createEvent( 'HTMLEvents' );
							event.initEvent( 'submit', true, false );
							form.dispatchEvent( event );
						};

					// letting the server side to know we are going to make an Ajax request
					var ajaxFlag = document.createElement( 'input' );
					ajaxFlag.setAttribute( 'type', 'hidden' );
					ajaxFlag.setAttribute( 'name', 'ajax' );
					ajaxFlag.setAttribute( 'value', 1 );
					form.appendChild( ajaxFlag );

					// automatically submit the form on file select
					input.addEventListener( 'change', function( e )
					{
						var i = 0;
						for(i; i < e.target.files.length; i++){
							if(e.target.files[ i ].type != 'text/xml'){
								alert('Возможна загрузка только YML (Yandex Market Language) файлов.');
								return false;
							}
						}
						showFiles( e.target.files );
						triggerFormSubmit();
					});
					
					// drag&drop files if the feature is available
					if( isAdvancedUpload )
					{
						form.classList.add( 'has-advanced-upload' ); // letting the CSS part to know drag&drop is supported by the browser

						[ 'drag', 'dragstart', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop' ].forEach( function( event )
						{
							form.addEventListener( event, function( e )
							{
								// preventing the unwanted behaviours
								e.preventDefault();
								e.stopPropagation();
							});
						});
						[ 'dragover', 'dragenter' ].forEach( function( event )
						{
							form.addEventListener( event, function()
							{
								form.classList.add( 'is-dragover' );
							});
						});
						[ 'dragleave', 'dragend', 'drop' ].forEach( function( event )
						{
							form.addEventListener( event, function()
							{
								form.classList.remove( 'is-dragover' );
							});
						});
						form.addEventListener( 'drop', function( e )
						{
							droppedFiles = e.dataTransfer.files; // the files that were dropped
							showFiles( droppedFiles );
							triggerFormSubmit();

											});
					}

					
					// if the form was submitted
					form.addEventListener( 'submit', function( e )
					{
						// preventing the duplicate submissions if the current one is in progress
						if( form.classList.contains( 'is-uploading' ) ) return false;

						form.classList.add( 'is-uploading' );
						form.classList.remove( 'is-error' );

						if( isAdvancedUpload ) // ajax file upload for modern browsers
						{
							e.preventDefault();

							// gathering the form data
							var ajaxData = new FormData( form );
						
							if( droppedFiles )
							{
								Array.prototype.forEach.call( droppedFiles, function( file )
								{
									ajaxData.append( input.getAttribute( 'name' ), file );
								});
							}

							// ajax request
							var ajax = new XMLHttpRequest();
							ajax.open( form.getAttribute( 'method' ), '/goods/addgoods', true );
							// просто загружает файл на сервер
							ajax.onload = function()
							{
								form.classList.remove( 'is-uploading' );
								//если все хорошо
								if( ajax.status >= 200 && ajax.status < 400 )
								{
									//берем ответ
									var data = JSON.parse(ajax.responseText);
									//в зависимости от ответа добавляется соответствующий класс
									form.classList.add( data.success == true ? 'editing' : 'is-error' );
									if( !data.success ) errorMsg.textContent = data.error;
									
									var add_file = document.getElementById('add_file');
									//если был тык-тык на "добавить", то парсим загруженный файл
									add_file.onclick = function(){
										var params = "file=" + encodeURIComponent(data.url);
										var ajax = new XMLHttpRequest();
										ajax.open('post', '/goods/parse?'+params, true );
										ajax.onload = function(){
											form.classList.remove( 'editing' );
											if( ajax.status >= 200 && ajax.status < 400 )
											{
												console.log(JSON.parse(ajax.responseText))
												var msg = JSON.parse(ajax.responseText);
												//временный костыль
												//window.location = "/goods/";
				
												form.classList.add( data.success == true ? 'is-success' : 'is-error' );
												if( !data.success ) errorMsg.textContent = data.error;		
											}
											else alert( 'Error. Please, contact the webmaster!' );
										};
										ajax.onerror = function()
										{
											form.classList.remove( 'is-uploading' );
											alert( 'Error. Please, try again!' );
										};
										ajax.send( params );
										return false;		
									}
										
								}
								else {alert( 'Error. Please, contact the webmaster!' )};
									
							};

							ajax.onerror = function()
							{
								form.classList.remove( 'is-uploading' );
								alert( 'Error. Please, try again!' );
							};
							//console.log( ajaxData.get('files'));
							ajax.send( ajaxData );
						}
						else // fallback Ajax solution upload for older browsers
						{
							var iframeName	= 'uploadiframe' + new Date().getTime(),
								iframe		= document.createElement( 'iframe' );

								$iframe		= $( '<iframe name="' + iframeName + '" style="display: none;"></iframe>' );

							iframe.setAttribute( 'name', iframeName );
							iframe.style.display = 'none';

							document.body.appendChild( iframe );
							form.setAttribute( 'target', iframeName );

							iframe.addEventListener( 'load', function()
							{
								var data = JSON.parse( iframe.contentDocument.body.innerHTML );
								form.classList.remove( 'is-uploading' )
								form.classList.add( data.success == true ? 'is-success' : 'is-error' )
								form.removeAttribute( 'target' );
								if( !data.success ) errorMsg.textContent = data.error;
								iframe.parentNode.removeChild( iframe );
							});
						}
					});


					// restart the form if has a state of error/success
					Array.prototype.forEach.call( restart, function( entry )
					{
						entry.addEventListener( 'click', function( e )
						{
							e.preventDefault();
							form.classList.remove( 'is-error', 'is-success' );
							input.click();
						});
					});

					// Firefox focus bug fix for file input
					input.addEventListener( 'focus', function(){ input.classList.add( 'has-focus' ); });
					input.addEventListener( 'blur', function(){ input.classList.remove( 'has-focus' ); });

				});
			}( document, window, 0 ));

		</script>
		</div>
    </div>

</div>